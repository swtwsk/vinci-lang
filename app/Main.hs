-- automatically generated by BNF Converter
module Main where

import Control.Monad ( when )
import System.Environment ( getArgs )
import System.Exit ( exitFailure, exitSuccess )

import Parser.LexVinci ( Token )
import Parser.ParVinci ( pLine, myLexer )
import Parser.PrintVinci ( Print, printTree )
import Parser.ErrM ( Err(..) )

type ParseFun a = [Token] -> Err a

myLLexer :: String -> [Token]
myLLexer = myLexer

type Verbosity = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: (Print a, Show a) => Verbosity -> ParseFun a -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p

run :: (Print a, Show a) => Verbosity -> ParseFun a -> String -> IO ()
run v p s = case p ts of
    Bad _ -> do 
        putStrLn "\nParse              Failed...\n"
        putStrV v "Tokens:"
        putStrV v $ show ts
        putStrLn s
        exitFailure
    Ok tree -> do 
        putStrLn "\nParse Successful!"
        showTree v tree
        exitSuccess
    where
        ts = myLLexer s


showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree
    = do
        putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
        putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
    putStrLn $ unlines
        [ "usage: Call with one of the following argument combinations:"
        , "  --help          Display this help message."
        , "  (no arguments)  Parse stdin verbosely."
        , "  (files)         Parse content of files verbosely."
        , "  -s (files)      Silent mode. Parse content of files silently."
        ]
    exitFailure

main :: IO ()
main = do
    args <- getArgs
    case args of
        ["--help"] -> usage
        [] -> getContents >>= run 2 pLine
        "-s":fs -> mapM_ (runFile 0 pLine) fs
        fs -> mapM_ (runFile 2 pLine) fs
