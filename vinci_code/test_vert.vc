struct UniformBufferObject {
    u_time : Float
};;

struct Uniforms {
    @[binding = 0] ubo : UniformBufferObject
};;

struct VertIns {
    @[location = 0] inPosition : Vec2,
    @[location = 1] inColor : Vec3,
    @[location = 2] inTexCoord : Vec2
};;

struct VertOuts {
    @[location = 0] fragColor : Vec4,
    @[location = 1] fragTexCoord : Vec2,
    gl_Position : Vec4
};;

let vert (u : Uniforms) (ins : VertIns) -> VertOuts =
    let (r, g, b) = ins.inColor in
    let (x, y) = ins.inPosition in
    let time = u.ubo.u_time in
    let (x2, y2) = (bezierFromTime x time, bezierFromTime y time) in
    VertOuts {
        gl_Position = (x2, y2, 0.0, 1.0),
        fragColor = (r, g, b, 1.0),
        fragTexCoord = ins.inTexCoord
    }
;;

let bezierFromTime (x : Float) (time : Float) -> Float =
    let cp = (fabs (cos time) * 0.5 + 0.7, fabs(sin time) * 0.5 + 0.5) in
    quadraticBezier x cp
;;

let quadraticBezier (x : Float) (a : Vec2) -> Float =
    let epsilon = 0.00001 in
    let (ax, ay) = (clamp a.x 0.0 1.0, clamp a.y 0.0 1.0) in
    let om2a = 1.0 - 2.0 * ax in
    let t = (sqrt (ax * ax + om2a * x) - ax) / om2a in
    let y = (1.0 - 2.0 * ay) * t * t + (2.0 * ay) * t in
    y
;;
