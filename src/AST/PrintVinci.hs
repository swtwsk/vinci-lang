{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module AST.PrintVinci where

-- pretty-printer generated by the BNF converter

import AST.AbsVinci
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print VIdent where
  prt _ (VIdent i) = doc (showString ( i))


instance Print SIdent where
  prt _ (SIdent i) = doc (showString ( i))


instance Print TPolyIdent where
  prt _ (TPolyIdent i) = doc (showString ( i))
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])


instance Print (Program a) where
  prt i e = case e of
    Prog _ phrases -> prPrec i 0 (concatD [prt 0 phrases])

instance Print (Line a) where
  prt i e = case e of
    Line _ phrase -> prPrec i 0 (concatD [prt 0 phrase, doc (showString ";;")])

instance Print (Phrase a) where
  prt i e = case e of
    Value _ letdef -> prPrec i 0 (concatD [prt 0 letdef])
    Expression _ expr -> prPrec i 0 (concatD [prt 0 expr])
    StructDecl _ structdef -> prPrec i 0 (concatD [prt 0 structdef])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ";;"), prt 0 xs])
instance Print (LetDef a) where
  prt i e = case e of
    Let _ letbinds -> prPrec i 0 (concatD [doc (showString "let"), prt 0 letbinds])
    LetRec _ letbinds -> prPrec i 0 (concatD [doc (showString "letrec"), prt 0 letbinds])

instance Print (LetBind a) where
  prt i e = case e of
    ConstBind _ letlvi expr -> prPrec i 0 (concatD [prt 0 letlvi, doc (showString "="), prt 0 expr])
    ProcBind _ procname letlvis rtype expr -> prPrec i 0 (concatD [prt 0 procname, prt 0 letlvis, prt 0 rtype, doc (showString "="), prt 0 expr])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "also"), prt 0 xs])
instance Print (LetLVI a) where
  prt i e = case e of
    LetLVI _ lambdavi -> prPrec i 0 (concatD [prt 0 lambdavi])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (Expr a) where
  prt i e = case e of
    EId _ vident -> prPrec i 8 (concatD [prt 0 vident])
    EInt _ n -> prPrec i 8 (concatD [prt 0 n])
    EFloat _ d -> prPrec i 8 (concatD [prt 0 d])
    ETrue _ -> prPrec i 8 (concatD [doc (showString "True")])
    EFalse _ -> prPrec i 8 (concatD [doc (showString "False")])
    EFieldGet _ expr vident -> prPrec i 8 (concatD [prt 8 expr, doc (showString "."), prt 0 vident])
    ETuple _ expr exprs -> prPrec i 8 (concatD [doc (showString "("), prt 0 expr, doc (showString ","), prt 0 exprs, doc (showString ")")])
    EApp _ expr1 expr2 -> prPrec i 7 (concatD [prt 7 expr1, prt 8 expr2])
    ETyped _ expr type_ -> prPrec i 6 (concatD [doc (showString "("), prt 0 expr, doc (showString ":"), prt 0 type_, doc (showString ")")])
    ENeg _ expr -> prPrec i 5 (concatD [doc (showString "-"), prt 6 expr])
    ENot _ expr -> prPrec i 5 (concatD [doc (showString "not"), prt 6 expr])
    EMul _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "*"), prt 5 expr2])
    EDiv _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "/"), prt 5 expr2])
    EMod _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "%"), prt 5 expr2])
    EAdd _ expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "+"), prt 4 expr2])
    ESub _ expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "-"), prt 4 expr2])
    ELTH _ expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString "<"), prt 3 expr2])
    ELE _ expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString "<="), prt 3 expr2])
    EGTH _ expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString ">"), prt 3 expr2])
    EGE _ expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString ">="), prt 3 expr2])
    EEQU _ expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString "=="), prt 3 expr2])
    ENE _ expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString "!="), prt 3 expr2])
    EAnd _ expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "and"), prt 1 expr2])
    EOr _ expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString "or"), prt 0 expr2])
    ECond _ expr1 expr2 expr3 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expr1, doc (showString "then"), prt 0 expr2, doc (showString "else"), prt 0 expr3])
    ELetIn _ letdef expr -> prPrec i 0 (concatD [prt 0 letdef, doc (showString "in"), prt 0 expr])
    ELambda _ lambdavis expr -> prPrec i 0 (concatD [doc (showString "\\"), prt 0 lambdavis, doc (showString "->"), prt 0 expr])
    ENamedCons _ sident fielddefs -> prPrec i 0 (concatD [prt 0 sident, doc (showString "{"), prt 0 fielddefs, doc (showString "}")])
    ECons _ fielddefs -> prPrec i 0 (concatD [doc (showString "{"), prt 0 fielddefs, doc (showString "}")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (LambdaVI a) where
  prt i e = case e of
    TypedVId _ lambdavi type_ -> prPrec i 0 (concatD [doc (showString "("), prt 0 lambdavi, doc (showString ":"), prt 0 type_, doc (showString ")")])
    LambdaVId _ vident -> prPrec i 0 (concatD [prt 0 vident])
    WildVId _ -> prPrec i 0 (concatD [doc (showString "_")])
    TupleVId _ lambdavis -> prPrec i 0 (concatD [doc (showString "("), prt 0 lambdavis, doc (showString ")")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (FieldDef a) where
  prt i e = case e of
    FieldDef _ vident expr -> prPrec i 0 (concatD [prt 0 vident, doc (showString "="), prt 0 expr])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (ProcName a) where
  prt i e = case e of
    ProcNameId _ vident -> prPrec i 0 (concatD [prt 0 vident])

instance Print (StructDef a) where
  prt i e = case e of
    SDef _ sident tpolyidents fielddecls -> prPrec i 0 (concatD [doc (showString "struct"), prt 0 sident, prt 0 tpolyidents, doc (showString "{"), prt 0 fielddecls, doc (showString "}")])

instance Print (FieldDecl a) where
  prt i e = case e of
    FieldDecl _ vident type_ -> prPrec i 0 (concatD [prt 0 vident, doc (showString ":"), prt 0 type_])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (Type a) where
  prt i e = case e of
    TInt _ -> prPrec i 1 (concatD [doc (showString "Int")])
    TFloat _ -> prPrec i 1 (concatD [doc (showString "Float")])
    TBool _ -> prPrec i 1 (concatD [doc (showString "Bool")])
    TStruct _ sident -> prPrec i 1 (concatD [prt 0 sident])
    TPoly _ tpolyident -> prPrec i 1 (concatD [prt 0 tpolyident])
    TFun _ type_1 type_2 -> prPrec i 0 (concatD [prt 1 type_1, doc (showString "->"), prt 0 type_2])

instance Print (RType a) where
  prt i e = case e of
    NoRetType _ -> prPrec i 0 (concatD [])
    RetType _ type_ -> prPrec i 0 (concatD [doc (showString "->"), prt 0 type_])


