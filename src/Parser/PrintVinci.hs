{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for Parser.
--   Generated by the BNF converter.

module Parser.PrintVinci where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, dropWhile, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Parser.AbsVinci

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i = \case
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    [";"]        -> showChar ';'
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i     = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt     _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Parser.AbsVinci.VIdent where
  prt _ (Parser.AbsVinci.VIdent i) = doc $ showString i

instance Print Parser.AbsVinci.SIdent where
  prt _ (Parser.AbsVinci.SIdent i) = doc $ showString i

instance Print Parser.AbsVinci.TPolyIdent where
  prt _ (Parser.AbsVinci.TPolyIdent i) = doc $ showString i
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Parser.AbsVinci.AttrString where
  prt _ (Parser.AbsVinci.AttrString i) = doc $ showString i

instance Print (Parser.AbsVinci.Program a) where
  prt i = \case
    Parser.AbsVinci.Prog _ phrases -> prPrec i 0 (concatD [prt 0 phrases])

instance Print (Parser.AbsVinci.Phrase a) where
  prt i = \case
    Parser.AbsVinci.Value _ letdef -> prPrec i 0 (concatD [prt 0 letdef])
    Parser.AbsVinci.StructDecl _ structdef -> prPrec i 0 (concatD [prt 0 structdef])
    Parser.AbsVinci.TypeSynon _ sident type_ -> prPrec i 0 (concatD [doc (showString "type"), prt 0 sident, doc (showString "="), prt 0 type_])
    Parser.AbsVinci.Expression _ expr -> prPrec i 0 (concatD [prt 0 expr])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";;"), prt 0 xs]

instance Print [Parser.AbsVinci.Phrase a] where
  prt = prtList

instance Print (Parser.AbsVinci.LetDef a) where
  prt i = \case
    Parser.AbsVinci.Let _ letbinds -> prPrec i 0 (concatD [doc (showString "let"), prt 0 letbinds])

instance Print (Parser.AbsVinci.LetBind a) where
  prt i = \case
    Parser.AbsVinci.ConstBind _ letlvi expr -> prPrec i 0 (concatD [prt 0 letlvi, doc (showString "="), prt 0 expr])
    Parser.AbsVinci.ProcBind _ procname letlvis rtype expr -> prPrec i 0 (concatD [prt 0 procname, prt 0 letlvis, prt 0 rtype, doc (showString "="), prt 0 expr])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "and"), prt 0 xs]

instance Print (Parser.AbsVinci.LetLVI a) where
  prt i = \case
    Parser.AbsVinci.LetLVI _ lambdavi -> prPrec i 0 (concatD [prt 0 lambdavi])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Parser.AbsVinci.LetLVI a] where
  prt = prtList

instance Print [Parser.AbsVinci.LetBind a] where
  prt = prtList

instance Print (Parser.AbsVinci.Expr a) where
  prt i = \case
    Parser.AbsVinci.EId _ vident -> prPrec i 8 (concatD [prt 0 vident])
    Parser.AbsVinci.EInt _ n -> prPrec i 8 (concatD [prt 0 n])
    Parser.AbsVinci.EFloat _ d -> prPrec i 8 (concatD [prt 0 d])
    Parser.AbsVinci.ETrue _ -> prPrec i 8 (concatD [doc (showString "True")])
    Parser.AbsVinci.EFalse _ -> prPrec i 8 (concatD [doc (showString "False")])
    Parser.AbsVinci.EFieldGet _ expr vident -> prPrec i 8 (concatD [prt 8 expr, doc (showString "."), prt 0 vident])
    Parser.AbsVinci.ETuple _ expr exprs -> prPrec i 8 (concatD [doc (showString "("), prt 0 expr, doc (showString ","), prt 0 exprs, doc (showString ")")])
    Parser.AbsVinci.EApp _ expr1 expr2 -> prPrec i 7 (concatD [prt 7 expr1, prt 8 expr2])
    Parser.AbsVinci.ETyped _ expr type_ -> prPrec i 6 (concatD [doc (showString "("), prt 0 expr, doc (showString ":"), prt 0 type_, doc (showString ")")])
    Parser.AbsVinci.ENeg _ expr -> prPrec i 5 (concatD [doc (showString "-"), prt 6 expr])
    Parser.AbsVinci.ENot _ expr -> prPrec i 5 (concatD [doc (showString "not"), prt 6 expr])
    Parser.AbsVinci.EVecMatMul _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString ".*"), prt 5 expr2])
    Parser.AbsVinci.EMatVecMul _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "*."), prt 5 expr2])
    Parser.AbsVinci.EMatMatMul _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "@"), prt 5 expr2])
    Parser.AbsVinci.EMul _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "*"), prt 5 expr2])
    Parser.AbsVinci.EDiv _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "/"), prt 5 expr2])
    Parser.AbsVinci.EMod _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "%"), prt 5 expr2])
    Parser.AbsVinci.EAdd _ expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "+"), prt 4 expr2])
    Parser.AbsVinci.ESub _ expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "-"), prt 4 expr2])
    Parser.AbsVinci.ELTH _ expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString "<"), prt 3 expr2])
    Parser.AbsVinci.ELE _ expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString "<="), prt 3 expr2])
    Parser.AbsVinci.EGTH _ expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString ">"), prt 3 expr2])
    Parser.AbsVinci.EGE _ expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString ">="), prt 3 expr2])
    Parser.AbsVinci.EEQU _ expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString "=="), prt 3 expr2])
    Parser.AbsVinci.ENE _ expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, doc (showString "!="), prt 3 expr2])
    Parser.AbsVinci.EAnd _ expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "&&"), prt 1 expr2])
    Parser.AbsVinci.EOr _ expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString "||"), prt 0 expr2])
    Parser.AbsVinci.ECond _ expr1 expr2 expr3 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 expr1, doc (showString "then"), prt 0 expr2, doc (showString "else"), prt 0 expr3])
    Parser.AbsVinci.ELetIn _ letdef expr -> prPrec i 0 (concatD [prt 0 letdef, doc (showString "in"), prt 0 expr])
    Parser.AbsVinci.ELambda _ lambdavis expr -> prPrec i 0 (concatD [doc (showString "\\"), prt 0 lambdavis, doc (showString "->"), prt 0 expr])
    Parser.AbsVinci.ECons _ sident fielddefs -> prPrec i 0 (concatD [prt 0 sident, doc (showString "{"), prt 0 fielddefs, doc (showString "}")])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Parser.AbsVinci.LambdaVI a) where
  prt i = \case
    Parser.AbsVinci.TypedVId _ lambdavi type_ -> prPrec i 0 (concatD [doc (showString "("), prt 0 lambdavi, doc (showString ":"), prt 0 type_, doc (showString ")")])
    Parser.AbsVinci.LambdaVId _ vident -> prPrec i 0 (concatD [prt 0 vident])
    Parser.AbsVinci.WildVId _ -> prPrec i 0 (concatD [doc (showString "_")])
    Parser.AbsVinci.TupleVId _ lambdavis -> prPrec i 0 (concatD [doc (showString "("), prt 0 lambdavis, doc (showString ")")])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Parser.AbsVinci.FieldDef a) where
  prt i = \case
    Parser.AbsVinci.FieldDef _ vident expr -> prPrec i 0 (concatD [prt 0 vident, doc (showString "="), prt 0 expr])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Parser.AbsVinci.Expr a] where
  prt = prtList

instance Print [Parser.AbsVinci.LambdaVI a] where
  prt = prtList

instance Print [Parser.AbsVinci.FieldDef a] where
  prt = prtList

instance Print (Parser.AbsVinci.ProcName a) where
  prt i = \case
    Parser.AbsVinci.ProcNameId _ vident -> prPrec i 0 (concatD [prt 0 vident])

instance Print (Parser.AbsVinci.StructDef a) where
  prt i = \case
    Parser.AbsVinci.SDef _ sident tpolyidents fielddecls -> prPrec i 0 (concatD [doc (showString "struct"), prt 0 sident, prt 0 tpolyidents, doc (showString "{"), prt 0 fielddecls, doc (showString "}")])

instance Print (Parser.AbsVinci.FieldDecl a) where
  prt i = \case
    Parser.AbsVinci.FieldDecl _ attr vident type_ -> prPrec i 0 (concatD [prt 0 attr, prt 0 vident, doc (showString ":"), prt 0 type_])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Parser.AbsVinci.FieldDecl a] where
  prt = prtList

instance Print [Parser.AbsVinci.TPolyIdent] where
  prt = prtList

instance Print (Parser.AbsVinci.Type a) where
  prt i = \case
    Parser.AbsVinci.TInt _ -> prPrec i 1 (concatD [doc (showString "Int")])
    Parser.AbsVinci.TFloat _ -> prPrec i 1 (concatD [doc (showString "Float")])
    Parser.AbsVinci.TBool _ -> prPrec i 1 (concatD [doc (showString "Bool")])
    Parser.AbsVinci.TStruct _ sident -> prPrec i 1 (concatD [prt 0 sident])
    Parser.AbsVinci.TPoly _ tpolyident -> prPrec i 1 (concatD [prt 0 tpolyident])
    Parser.AbsVinci.TFun _ type_1 type_2 -> prPrec i 0 (concatD [prt 1 type_1, doc (showString "->"), prt 0 type_2])

instance Print (Parser.AbsVinci.RType a) where
  prt i = \case
    Parser.AbsVinci.NoRetType _ -> prPrec i 0 (concatD [])
    Parser.AbsVinci.RetType _ type_ -> prPrec i 0 (concatD [doc (showString "->"), prt 0 type_])

instance Print (Parser.AbsVinci.Attr a) where
  prt i = \case
    Parser.AbsVinci.NoAttr _ -> prPrec i 0 (concatD [])
    Parser.AbsVinci.Attr _ attrstring -> prPrec i 0 (concatD [doc (showString "@"), prt 0 attrstring])

